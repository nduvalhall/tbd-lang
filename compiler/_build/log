# dune fmt
# OCAMLPARAM: unset
# Shared cache: enabled-except-user-rules
# Shared cache location: /Users/mduvalhall/.cache/dune/db
# Workspace root: /Users/mduvalhall/Documents/tbd-lang/compiler
# Auto-detected concurrency: 11
# Dune context:
#  { name = "default"
#  ; kind = "default"
#  ; profile = Dev
#  ; merlin = true
#  ; fdo_target_exe = None
#  ; build_dir = In_build_dir "default"
#  ; instrument_with = []
#  }
$ /Users/mduvalhall/.opam/5.0.0/bin/ocamlc.opt -config > /var/folders/r0/txg36nld1cv1mv_rcwq4q4xh0000gn/T/dune_ff60a7_output
$ (cd _build/default && /Users/mduvalhall/.opam/5.0.0/bin/ocamlformat --impl lexer.ml) > _build/default/.formatted/lexer.ml
$ /usr/bin/git --no-pager diff --no-index --color=always -u _build/default/lexer.ml _build/default/.formatted/lexer.ml
> diff --git a/_build/default/lexer.ml b/_build/default/.formatted/lexer.ml
> index 86e8543..b55c146 100644
> --- a/_build/default/lexer.ml
> +++ b/_build/default/.formatted/lexer.ml
> @@ -5,37 +5,34 @@ let is_char c =
>  
>  let next_word chars =
>    let rec aux chars word_chars =
> -    begin match chars with
> +    match chars with
>      | [] -> (chars, word_chars)
> -    | c :: rest ->
> -      begin match is_char c with
> +    | c :: rest -> (
> +        match is_char c with
>          | true -> aux rest (c :: word_chars)
> -        | false -> (chars, word_chars)
> -        end
> -    end
> +        | false -> (chars, word_chars))
>    in
>    let chars, word_chars = aux chars [] in
>    (chars, String.of_seq (List.to_seq (List.rev word_chars)))
>  
>  let tokenize chars =
>    let rec aux chars tokens =
> -    begin match chars with
> +    match chars with
>      | [] -> tokens
> -    | c :: rest ->
> -        begin match c with
> +    | c :: rest -> (
> +        match c with
>          | 'a' .. 'z' | 'A' .. 'Z' | '\'' ->
>              let chars, word = next_word chars in
>              aux chars (IDENT word :: tokens)
> -        | ' ' -> aux rest (SPACE::tokens)
> -        | '0'..'9' -> aux rest (INT(c) ::tokens)
> -        | _ -> aux rest (ELSE c :: tokens)
> -        end
> -    end
> +        | ' ' -> aux rest (SPACE :: tokens)
> +        | '0' .. '9' -> aux rest (INT c :: tokens)
> +        | _ -> aux rest (ELSE c :: tokens))
>    in
>    List.rev (aux chars [])
>  
> -
> -let () =let t = tokenize [ 'a'; 'b'; 'c'; ' ' ] in
> -let code = "let num = 1" in
> -let chars = List.of_seq (String.to_seq code) in
> -let ts = tokenize chars in ()
> +let () =
> +  let t = tokenize [ 'a'; 'b'; 'c'; ' ' ] in
> +  let code = "let num = 1" in
> +  let chars = List.of_seq (String.to_seq code) in
> +  let ts = tokenize chars in
> +  ()
[1]
