import core.bool
import core.int
import core.io
import core.list
import core.string


type token =
  | Ident of string 
  | Space 
  | Int of int 
  | Else of char
  | Person of { name: string, age: int }


let john =
  Person { name = "John", age = 30 }


fun is_char c =
  match c with
  | 'a' .. 'z' | 'A' .. 'Z' | '_' | '\'' -> true
  | _ -> false


fun is_digit c =
  match c with
  | '0' .. '9' -> true
  | _ -> false


fun next_word chars =
  fun rec aux chars word_chars =
    match chars with
    | [] -> (chars, word_chars)
    | c :: res ->
      match bool.and (is_char c) (is_digit c) with
      | true -> aux rest (c :: word_chars)
      | false -> (chars, word_chars)
  in

  let (chars, word_chars) = aux chars [] in
  let word = string.from_chars word_chars in

  (chars, word)


fun tokenize chars =
  fun rec aux chars tokens =
    match chars with
    | [] -> tokens
    | c :: rest ->
      match c with
      | 'a' .. 'z' | 'A' .. 'Z' | '_' | '\'' ->
          let (chars, word) = next_word chars in
          aux chars ((Ident word) :: tokens)
      | ' ' -> aux rest (Space :: tokens)
      | '0' .. '9' -> 
        let i = int.from_char c in
        aux rest ((Int i) :: tokens)
      | _ -> aux rest ((Else c) :: tokens)
  in
  
  list.reverse (aux chars [])


let () =
  let code = "let num = 1" in
  let chars = string.to_chars in
  let tokens = tokenize chars in
  io.println code



