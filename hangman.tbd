import tbd.Array
import tbd.Char
import tbd.File
import tbd.Io
import tbd.Math
import tbd.String


type Result 'a 'b = Ok of 'a | Error of 'b  # these are primatives in reality
type Option 'a = Some of 'a | None          #

type Person = { name : string, surname : string; age : int }
type Dog = { name : string, good_boy : bool }


# val greet : { name : string, ... }  -> unit
greet entity = Io.print_line entity.name

"""
val procreate : 
    { name : string, surname : string, ... } ->
    { name : string, surname : string, ... } ->
    string -> Person
"""
procreate mother father name = {
    Person { 
        name, 
        surname = mother.surname, 
        age = 0
    }
}

"""
module List : sig
    val fold : (a' -> b' -> a') -> a' -> b' list -> a'
    val sum : (a' -> b' -> a') -> a' -> b' list -> a'
    val length : a' list -> int
end
"""
module List = {
    # val fold : (a' -> b' -> a') -> a' -> b' list -> a'
    fold f acc l = match l with {
        [] -> acc,
        hd :: tl -> fold f (f acc hd) tl
    }

    reverse l = {
        aux l' acc = match l' {
            [] -> acc,
            hd :: tl -> aux tl (hd :: acc)
        };
        aux l []
    }

    empty () = []

    make f size = {
        aux i acc = match i {
            0 -> reverse acc,
            n -> aux (n - 1) (f n :: acc)
        };
        aux size []
    }

    # val filter : ('a -> bool) -> a' list -> a' list
    filter f l = {
        aux l' acc = match l' {
            [] -> reverse acc,
            hd :: tl -> match f hd {
                true -> aux tl (hd :: acc),
                false -> aux tl acc
            }
        };
        aux l []
    }

    # val sum : (a' -> b' -> a') -> a' -> b' list -> a'
    sum f zero l = fold f zero l
    
    # val length : a' list -> int
    length l = fold (len _ -> len + 1) 0 l
}


# val get_random_word : string -> string
get_random_word filepath = {
	words = File.read_lines filepath |> Array.from_list;
	index = Math.random_int 0 (Array.length words);
	match Array.get index words {
		Ok word -> word,
		Error s -> Io.panic s
   }
}


# val run_game : int -> char list -> unit Option
run_game chances left = {
	match chances {
		0 -> match List.length left {
            0 -> Some (),
            _ -> None
        },
		n -> {
			guess = Io.read_line () |> Char.from_string;
			left = List.filter (c -> Char.neq c guess) left;
			run_game (chances - 1) left
        }
    }
}

# val main : unit -> unit
main () = {
	filepath = "hangman_words.txt";
	chances = 10;
	left = String.to_chars (get_random_word filepath);
	match run_game chances left {
		Some () -> Io.print_line "You won!",
		None -> Io.print_line "You lost..."
    }
}